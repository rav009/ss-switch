#!/usr/bin/env python

import sys
import os

def add():
	name = raw_input('Please input a name for this entry: ')
	ip = raw_input('Please input the ip address: ')
	port = raw_input('Please input the port number(directly Enter to use default value): ')
	password = raw_input('Please input the password(directly Enter to use default value): ')
	encrypt = raw_input('Please input the encrypt mode(directly Enter to use aes-256-cfb): ')
	if not encrypt or str(encrypt).strip()=='':
		encrypt = 'aes-256-cfb'
	os.system('uci add ss-switch ss_entry')
	os.system('uci set ss-switch.@ss_entry[-1].name="%s"'%name)
	os.system('uci set ss-switch.@ss_entry[-1].encrypt="%s"'%encrypt)
	os.system('uci set ss-switch.@ss_entry[-1].ip="%s"'%ip)
	if not port or str(port).strip() == '':
		os.system('uci set ss-switch.@ss_entry[-1].port=$(uci get ss-switch.default_set.port)')
	else:
		if not port.isdigit():
			raise Exception('Port is not a valid number.')
		os.system('uci set ss-switch.@ss_entry[-1].port=%d'%int(port))
	if not password or str(password).strip() == '':
		os.system('uci set ss-switch.@ss_entry[-1].password=$(uci get ss-switch.default_set.password)')
	else:
		os.system('uci set ss-switch.@ss_entry[-1].password="%s"'%password)
	os.system('uci commit ss-switch')
	return

def delete(id):
	os.system('uci delete ss-switch.@ss_entry[%d]'%id)
	os.system('uci commit ss-switch')
	print 'After deleting an entry, the ID of other entries may be changed.'
	show()

def use(id):
	os.system('uci set shadowsocks.@shadowsocks[0].server=$(uci get ss-switch.@ss_entry[%d].ip)'%id)
	os.system('uci set shadowsocks.@shadowsocks[0].server_port=$(uci get ss-switch.@ss_entry[%d].port)'%id)
	os.system('uci set shadowsocks.@shadowsocks[0].password=$(uci get ss-switch.@ss_entry[%d].password)'%id)
	os.system('uci set shadowsocks.@shadowsocks[0].encrypt_method=$(uci get ss-switch.@ss_entry[%d].encrypt)'%id)
	os.system('uci commit shadowsocks')
	os.system('/etc/init.d/shadowsocks restart')

def show():
	os.system('echo shadowsocks status: enable=$(uci get shadowsocks.@shadowsocks[0].enable) \
server=$(uci get shadowsocks.@shadowsocks[0].server) \
port=$(uci get shadowsocks.@shadowsocks[0].server_port)')
	f = open('/etc/config/ss-switch','r');
	sections = f.read()
	f.close()
	n = sections.count('config ss_entry')
	for i in range(0,n):
		print 'ID: %d'%i
		os.system('echo [$(uci get ss-switch.@ss_entry[%d].name)] \
$(uci get ss-switch.@ss_entry[%d].ip):$(uci get ss-switch.@ss_entry[%d].port) \
$(uci get ss-switch.@ss_entry[%d].password)\\($(uci get ss-switch.@ss_entry[%d].encrypt)\\)\
'%(i,i,i,i,i))

def ping(id):
	os.system('ping -c4 $(uci get ss-switch.@ss_entry[%d].ip)'%id)
	
def setDefault(port, psd):
	if not port.isdigit():
		raise Exception('Port is not a valid number.')
	os.system('uci set ss-switch.default_set=portpsd')
	os.system('uci set ss-switch.default_set.port=%d'%int(port))
	os.system('uci set ss-switch.default_set.password="%s"'%psd)
	os.system('uci commit ss-switch')
	
def turn(s):
	if s==1:
		os.system('uci set shadowsocks.@shadowsocks[0].enable=1')
	else:
		os.system('uci set shadowsocks.@shadowsocks[0].enable=0')
	os.system('uci commit shadowsocks')
	os.system('/etc/init.d/shadowsocks restart')
	
def ip():
	os.system('uci get shadowsocks.@shadowsocks[0].lan_ac_ip')

def allow(ip):
	os.system('uci add_list shadowsocks.@shadowsocks[0].lan_ac_ip="%s"'%(ip))

def ban(ip):
	os.system('uci del_list shadowsocks.@shadowsocks[0].lan_ac_ip="%s"'%(ip))

if __name__ == '__main__':
	if not os.path.exists('/etc/config/ss-switch'):
		os.system('touch /etc/config/ss-switch')
	mode = 'None'
	help = 'usage: ss-switch <operation>\nOperations:\n\
\tadd\t\tadd a new entry.\n\
\tshow\t\tshow the status of SS and all entries added.\n\
\tuse \033[4mID\033[0m\t\tchoose an entry by ID to use.\n\
\ton\t\tturn on shadowsocks.\n\
\toff\t\tturn off shadowsocks.\n\
\tdelete \033[4mID\033[0m\tdelete an existed entry by ID.\n\
\tping \033[4mID\033[0m\t\tshow the ping info of an entry.\n\
\tsetdefault \033[4mPort\033[0m \033[4mPassword\033[0m\n\
\t\t\tset the default value for port and password.\n\
\033[4mID\033[0m is the index of UCI config section(start with 0).\
\tip\t\tshow the IP allowed to use SS.\n\
\tallow \033[4mIP\033[0m\t\tAllow certain IP to access SS.\n\
\tban \033[4mIP\033[0m\t\tBan certain IP from using SS.\n'
	if len(sys.argv)>1:
		mode = str(sys.argv[1]).lower()
	if mode in ['use','delete'] and len(sys.argv)<=2:
		print help
	elif mode in ['use','delete'] and str(sys.argv[2]).isdigit() == False:
		print help
	else:
		if mode == 'add':
			add()
		elif mode == 'delete':
			v = int(sys.argv[2])
			delete(v)
		elif mode == 'show':
			show()
		elif mode == 'use':
			v = int(sys.argv[2])
			use(v)
		elif mode == 'ping':
			v = int(sys.argv[2])
			ping(v)
		elif mode == 'setdefault':
			port = str(sys.argv[2])
			password = str(sys.argv[3])
			setDefault(port, password)
		elif mode == 'on':
			turn(1)
		elif mode == 'off':
			turn(0)
		elif mode == 'ip':
		  	ip()
		elif mode == 'allow':
		  	allow(str(sys.argv[2]))
		elif mode == 'ban':
		  	ban(str(sys.argv[2]))
		else:
			print help
